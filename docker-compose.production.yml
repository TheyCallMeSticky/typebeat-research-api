# Docker Compose Configuration for Production
# TypeBeat Research API - Production Environment

version: '3.8'

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local

networks:
  typebeat_network:
    driver: bridge

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16.4-alpine
    container_name: typebeat-db-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-typebeat_research}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?Database password required}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-typebeat_research}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - typebeat_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: typebeat-cache-prod
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --maxmemory ${REDIS_MAX_MEMORY:-2gb}
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --requirepass ${REDIS_PASSWORD:?Redis password required}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - typebeat_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # TypeBeat Research API
  typebeat-research-api:
    container_name: typebeat-research-api-prod
    build:
      context: .
      dockerfile: Dockerfile.prod
      args:
        NODE_ENV: production
    restart: unless-stopped
    ports:
      - "${API_PORT:-3002}:3002"
    environment:
      # Application Configuration
      NODE_ENV: production
      PORT: 3002
      
      # Database Configuration
      DATABASE_URL: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-typebeat_research}
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_DB: ${REDIS_DB:-0}
      
      # External APIs
      YOUTUBE_API_KEY: ${YOUTUBE_API_KEY:?YouTube API key required}
      SPOTIFY_CLIENT_ID: ${SPOTIFY_CLIENT_ID:?Spotify client ID required}
      SPOTIFY_CLIENT_SECRET: ${SPOTIFY_CLIENT_SECRET:?Spotify client secret required}
      LASTFM_API_KEY: ${LASTFM_API_KEY:?Last.fm API key required}
      LASTFM_SHARED_SECRET: ${LASTFM_SHARED_SECRET:?Last.fm shared secret required}
      GENIUS_CLIENT_ID: ${GENIUS_CLIENT_ID:-}
      GENIUS_CLIENT_SECRET: ${GENIUS_CLIENT_SECRET:-}
      
      # Security Configuration
      API_KEY_REQUIRED: ${API_KEY_REQUIRED:-false}
      CORS_ORIGIN: ${CORS_ORIGIN:-*}
      RATE_LIMIT_ENABLED: ${RATE_LIMIT_ENABLED:-true}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
      
      # Logging Configuration
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FORMAT: json
      LOG_FILE: /app/logs/typebeat-api.log
      
      # Performance Configuration
      CACHE_TTL_DEFAULT: ${CACHE_TTL_DEFAULT:-3600}
      YOUTUBE_QUOTA_DAILY_LIMIT: ${YOUTUBE_QUOTA_DAILY_LIMIT:-10000}
      ENABLE_REQUEST_COMPRESSION: ${ENABLE_REQUEST_COMPRESSION:-true}
      
      # Monitoring Configuration
      ENABLE_METRICS: ${ENABLE_METRICS:-true}
      METRICS_PORT: 9090
      HEALTH_CHECK_INTERVAL: ${HEALTH_CHECK_INTERVAL:-300}
      
      # Feature Flags
      ENABLE_GENIUS_API: ${ENABLE_GENIUS_API:-true}
      ENABLE_CACHE_WARMING: ${ENABLE_CACHE_WARMING:-true}
      ENABLE_ADAPTIVE_TTL: ${ENABLE_ADAPTIVE_TTL:-true}
      
    volumes:
      - app_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - typebeat_network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: typebeat-nginx-prod
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - app_logs:/var/log/nginx
    depends_on:
      - typebeat-research-api
    networks:
      - typebeat_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Prometheus Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: typebeat-prometheus-prod
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./docker/prometheus/rules:/etc/prometheus/rules:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - typebeat_network
    profiles:
      - monitoring

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: typebeat-grafana-prod
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:?Grafana admin password required}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - typebeat_network
    profiles:
      - monitoring

  # Log Aggregation with Loki (Optional)
  loki:
    image: grafana/loki:latest
    container_name: typebeat-loki-prod
    restart: unless-stopped
    ports:
      - "${LOKI_PORT:-3100}:3100"
    volumes:
      - ./docker/loki/loki.yml:/etc/loki/local-config.yaml:ro
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - typebeat_network
    profiles:
      - logging

  # Promtail Log Shipper (Optional)
  promtail:
    image: grafana/promtail:latest
    container_name: typebeat-promtail-prod
    restart: unless-stopped
    volumes:
      - ./docker/promtail/promtail.yml:/etc/promtail/config.yml:ro
      - app_logs:/var/log/app:ro
      - /var/log:/var/log/host:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - typebeat_network
    profiles:
      - logging

  # Backup Service (Optional)
  backup:
    image: postgres:16.4-alpine
    container_name: typebeat-backup-prod
    restart: "no"
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: /backup.sh
    depends_on:
      - postgres
    networks:
      - typebeat_network
    profiles:
      - backup

# Health check for the entire stack
x-healthcheck-common: &healthcheck-common
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s

